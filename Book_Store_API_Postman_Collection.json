{
  "info": {
    "_postman_id": "6bcf7a5d-3c24-4ca4-b9f8-3c1d5dab4168",
    "name": "Book Store API",
    "description": "A collection for the Book Store Node.js API with all routes including authentication, books, authors, and users.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints for user registration and login",
      "item": [
        {
          "name": "Register",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"user@example.com\",\n    \"userName\": \"testuser\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/register",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "register"]
            },
            "description": "Register a new user"
          },
          "response": []
        },
        {
          "name": "Login",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"user@example.com\",\n    \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/auth/login",
              "host": ["{{base_url}}"],
              "path": ["api", "auth", "login"]
            },
            "description": "Login with existing user credentials"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Books",
      "description": "Book management endpoints",
      "item": [
        {
          "name": "Get All Books",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/books",
              "host": ["{{base_url}}"],
              "path": ["api", "books"]
            },
            "description": "Get all books"
          },
          "response": []
        },
        {
          "name": "Get Books with Price Filter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/books?minPrice=10&maxPrice=50",
              "host": ["{{base_url}}"],
              "path": ["api", "books"],
              "query": [
                {
                  "key": "minPrice",
                  "value": "10"
                },
                {
                  "key": "maxPrice",
                  "value": "50"
                }
              ]
            },
            "description": "Get books filtered by price range"
          },
          "response": []
        },
        {
          "name": "Get Book by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/books/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "books", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "Book ID"
                }
              ]
            },
            "description": "Get a single book by its ID"
          },
          "response": []
        },
        {
          "name": "Create New Book",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Sample Book Title\",\n    \"author\": \"author_id_here\",\n    \"description\": \"This is a sample book description\",\n    \"price\": 29.99,\n    \"cover\": \"http://example.com/cover-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/books/newBook",
              "host": ["{{base_url}}"],
              "path": ["api", "books", "newBook"]
            },
            "description": "Create a new book (Admin only)"
          },
          "response": []
        },
        {
          "name": "Update Book",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"title\": \"Updated Book Title\",\n    \"author\": \"author_id_here\",\n    \"description\": \"This is an updated book description\",\n    \"price\": 39.99,\n    \"cover\": \"http://example.com/updated-cover-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/books/updateBook/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "books", "updateBook", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "Book ID to update"
                }
              ]
            },
            "description": "Update an existing book (Admin only)"
          },
          "response": []
        },
        {
          "name": "Delete Book",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/books/deleteBook/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "books", "deleteBook", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "Book ID to delete"
                }
              ]
            },
            "description": "Delete a book (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Authors",
      "description": "Author management endpoints",
      "item": [
        {
          "name": "Get All Authors",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/authors",
              "host": ["{{base_url}}"],
              "path": ["api", "authors"]
            },
            "description": "Get all authors"
          },
          "response": []
        },
        {
          "name": "Get Authors with Pagination",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/authors?page=1&limit=10",
              "host": ["{{base_url}}"],
              "path": ["api", "authors"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            },
            "description": "Get authors with pagination"
          },
          "response": []
        },
        {
          "name": "Get Author by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/authors/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "authors", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "Author ID"
                }
              ]
            },
            "description": "Get a single author by ID"
          },
          "response": []
        },
        {
          "name": "Create New Author",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"nationality\": \"American\",\n    \"image\": \"http://example.com/author-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/authors/newAuthor",
              "host": ["{{base_url}}"],
              "path": ["api", "authors", "newAuthor"]
            },
            "description": "Create a new author (Admin only)"
          },
          "response": []
        },
        {
          "name": "Update Author",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"firstName\": \"Updated First Name\",\n    \"lastName\": \"Updated Last Name\",\n    \"nationality\": \"Updated Nationality\",\n    \"image\": \"http://example.com/updated-author-image.jpg\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/authors/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "authors", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "Author ID to update"
                }
              ]
            },
            "description": "Update an existing author (Admin only)"
          },
          "response": []
        },
        {
          "name": "Delete Author",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/authors/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "authors", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "Author ID to delete"
                }
              ]
            },
            "description": "Delete an author (Admin only)"
          },
          "response": []
        }
      ]
    },
    {
      "name": "Users",
      "description": "User management endpoints",
      "item": [
        {
          "name": "Get All Users",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users",
              "host": ["{{base_url}}"],
              "path": ["api", "users"]
            },
            "description": "Get all users (Admin only)"
          },
          "response": []
        },
        {
          "name": "Get User by ID",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "User ID"
                }
              ]
            },
            "description": "Get a user by ID (Admin or the user themselves)"
          },
          "response": []
        },
        {
          "name": "Update User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"updated@example.com\",\n    \"userName\": \"updatedusername\",\n    \"password\": \"newpassword123\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/api/users/updateUser/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "users", "updateUser", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "User ID to update"
                }
              ]
            },
            "description": "Update a user (Admin or the user themselves)"
          },
          "response": []
        },
        {
          "name": "Delete User",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{token}}",
                  "type": "string"
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/api/users/:id",
              "host": ["{{base_url}}"],
              "path": ["api", "users", ":id"],
              "variable": [
                {
                  "key": "id",
                  "value": "",
                  "description": "User ID to delete"
                }
              ]
            },
            "description": "Delete a user (Admin or the user themselves)"
          },
          "response": []
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Save the token from login response for subsequent requests",
          "if (pm.response.code === 200 || pm.response.code === 201) {",
          "    if (pm.response.json().token) {",
          "        pm.environment.set(\"token\", pm.response.json().token);",
          "    }",
          "}"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:5000",
      "type": "string"
    }
  ]
}
